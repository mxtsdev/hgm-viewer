<!DOCTYPE html>
<html lang="en">
<head>
    <title>Hgm Viewer</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="main.css">
</head>

<body>

    <!-- Import maps polyfill -->
    <!-- Remove this when import maps will be widely supported -->
    <script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>

    <script type="importmap">
        {
            "imports": {
                "three": "../build/three.module.js",
                "three/addons/": "./jsm/"
            }
        }
    </script>

    <script type="module">

        import * as THREE from 'three';

        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
        import { PointerLockControls } from 'three/addons/controls/PointerLockControls.js'
        import { GUI } from 'three/addons/libs/lil-gui.module.min.js';

        let camera, scene, renderer, controls, controls2, cameraSavedProps, gui;

        let moveForward = false;
        let moveBackward = false;
        let moveLeft = false;
        let moveRight = false;
        let moveUp = false;
        let moveDown = false;

        let prevTime = performance.now();
        const velocity = new THREE.Vector3();
        const direction = new THREE.Vector3();
        const cameraOffset = new THREE.Vector3(0.25, 0.25, 0.75);

        init();
        animate();

        function init() {
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 1000);
            camera.position.z = cameraOffset.z;
            camera.position.x = cameraOffset.x;
            camera.position.y = cameraOffset.y;

            camera.layers.enable(1);

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.shadowMap.enabled = true;
            document.body.appendChild(renderer.domElement);

            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x545454);
            scene.fog = new THREE.Fog(0xa0a0a0, 10, 50);


            const hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);
            hemiLight.color.setHSL(0.6, 1, 0.6);
            hemiLight.groundColor.setHSL(0.095, 1, 0.75);
            hemiLight.position.set(0, 50, 25);
            scene.add(hemiLight);

            const hemiLight2 = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);
            hemiLight2.color.setHSL(0.6, 1, 0.6);
            hemiLight2.groundColor.setHSL(0.095, 1, 0.75);
            hemiLight2.position.set(0, -50, -25);
            scene.add(hemiLight2);

            const dirLight = new THREE.DirectionalLight(0xffffff, 1);
            dirLight.color.setHSL(0.1, 1, 0.95);
            dirLight.position.set(-0.25, -0.25, -0.25);
            dirLight.position.multiplyScalar(30);
            scene.add(dirLight);

            scene.add(camera);

            let axesHelper = new THREE.AxesHelper(5);
            axesHelper.layers.set(1);
            scene.add(axesHelper);

            controls2 = new OrbitControls(camera, renderer.domElement);
            controls2.minDistance = 0;
            controls2.maxDistance = 1000;
            controls2.enablePan = true;
            controls2.enableDamping = false;
            controls2.addEventListener('change', render);

            controls = new PointerLockControls(camera, renderer.domElement);

            controls.addEventListener('unlock', function () {
                let v = controls.getPointInfront(0.25);
                controls2.target.set(v.x, v.y, v.z);
            });

            scene.add(controls.getObject());

            const onKeyDown = function (event) {
                if (event.shiftKey) {
                    if (controls.isLocked) controls.unlock();
                    else controls.lock();
                }

                switch (event.code) {

                    case 'ArrowUp':
                    case 'KeyW':
                        moveForward = true;
                        break;

                    case 'ArrowLeft':
                    case 'KeyA':
                        moveLeft = true;
                        break;

                    case 'ArrowDown':
                    case 'KeyS':
                        moveBackward = true;
                        break;

                    case 'ArrowRight':
                    case 'KeyD':
                        moveRight = true;
                        break;
                    case 'Space':
                        moveUp = true;
                        break;
                    case 'KeyC':
                        moveDown = true;
                        break;
                }

            };

            const onKeyUp = function (event) {

                switch (event.code) {

                    case 'ArrowUp':
                    case 'KeyW':
                        moveForward = false;
                        break;

                    case 'ArrowLeft':
                    case 'KeyA':
                        moveLeft = false;
                        break;

                    case 'ArrowDown':
                    case 'KeyS':
                        moveBackward = false;
                        break;

                    case 'ArrowRight':
                    case 'KeyD':
                        moveRight = false;
                        break;
                    case 'Space':
                        moveUp = false;
                        break;
                    case 'KeyC':
                        moveDown = false;
                        break;
                }

            };

            document.addEventListener('keydown', onKeyDown);
            document.addEventListener('keyup', onKeyUp);

            window.addEventListener('resize', onWindowResize);

            cameraSavedProps = {};
            cameraSavedProps.position = camera.position.clone();
            cameraSavedProps.rotation = camera.rotation.clone();
            cameraSavedProps.controlCenter = controls2.target.clone();

            const settingsParams = {
                showAxis: true,
                resetCamera: function () { RestoreCamera(); }
            };

            const settingsChanger = function () {
                if (settingsParams['showAxis'] != camera.layers.isEnabled(1)) {
                    camera.layers.toggle(1);
                    render();
                }
            };

            gui = new GUI();
            window.gui = gui;

            gui.add(settingsParams, 'showAxis', true).name("Show axis").onChange(settingsChanger);
            gui.add(settingsParams, 'resetCamera').name("Reset camera");

            settingsChanger();
        }

        function animate() {
            requestAnimationFrame(animate);

            const time = performance.now();

            if (controls.isLocked === true) {
                const delta = (time - prevTime) / 1000;

                velocity.x -= velocity.x * 10.0 * delta;
                velocity.z -= velocity.z * 10.0 * delta;
                velocity.y -= velocity.y * 10.0 * delta;

                direction.z = Number(moveForward) - Number(moveBackward);
                direction.x = Number(moveRight) - Number(moveLeft);
                direction.y = Number(moveUp) - Number(moveDown);
                direction.normalize(); // this ensures consistent movements in all directions

                if (moveForward || moveBackward) velocity.z -= direction.z * 20.0 * delta;
                if (moveLeft || moveRight) velocity.x -= direction.x * 20.0 * delta;
                if (moveUp || moveDown) velocity.y -= direction.y * 20.0 * delta;

                controls.moveRight(- velocity.x * delta);
                controls.moveForward(- velocity.z * delta);
                controls.moveUp(- velocity.y * delta);
            }

            prevTime = time;

            renderer.render(scene, camera);
        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

        }

        function render() {

            renderer.render(scene, camera);

        }

        function LoadNewModel(modelPath, lookAt, dist) {
            console.log("[Loading] Model: " + modelPath);

            function onProgress(xhr) {
                if (xhr.lengthComputable) {
                    const percentComplete = xhr.loaded / xhr.total * 100;
                    console.log('model ' + Math.round(percentComplete, 2) + '% downloaded');
                }
            }

            function onError(e) { console.log("Error: " + e); }

            var manager = new THREE.LoadingManager();

            new GLTFLoader(manager)
                .load(modelPath, function (gltf) {
                    ClearScene();

                    scene.add(gltf.scene);

                    if (typeof(lookAt) == "object" && lookAt.length >= 3) {
                        var v2 = new THREE.Vector3(lookAt[0], lookAt[1], lookAt[2]);
                        var v1 = new THREE.Vector3().addVectors(v2, new THREE.Vector3(dist * 0.4, dist * 0.4, dist));

                        SetCamera(v1, v2);
                    } else {
                        render();
                    }

                }, onProgress, onError);
        }

        function ToggleAxis() {
            let controller = gui.controllers.find(function (x) { return x.property == "showAxis"; });
            controller.setValue(!controller.getValue())
        }

        function SetCamera(cameraPos, lookAtPos) {
            camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);
            camera.rotation.set(0, 0, 0);
            controls2.target.set(lookAtPos.x, lookAtPos.y, lookAtPos.z);
            controls2.update();

            cameraSavedProps.position = camera.position.clone();
            cameraSavedProps.rotation = camera.rotation.clone();
            cameraSavedProps.controlCenter = controls2.target.clone();

            render();
        }

        function RestoreCamera() {
            const position = cameraSavedProps.position
            const rotation = cameraSavedProps.rotation
            const controlCenter = cameraSavedProps.controlCenter;

            camera.position.set(position.x, position.y, position.z);
            camera.rotation.set(rotation.x, rotation.y, rotation.z);

            controls2.target.set(controlCenter.x, controlCenter.y, controlCenter.z);
            controls2.update();

            render();
        }

        function ClearScene() {
            for (var i = scene.children.length - 1; i >= 0; i--) {
                let sceneObject = scene.children[i];
                if (!(sceneObject instanceof THREE.Object3D) ||
                    sceneObject instanceof THREE.AxesHelper ||
                    sceneObject instanceof THREE.GridHelper ||
                    sceneObject instanceof THREE.HemisphereLight ||
                    sceneObject instanceof THREE.DirectionalLight
                ) return;

                // Remove geometries to free GPU resources
                if (sceneObject.geometry) sceneObject.geometry.dispose();

                // Remove materials to free GPU resources
                if (sceneObject.material) {
                    if (sceneObject.material instanceof Array) {
                        sceneObject.material.forEach(material => material.dispose());
                    } else {
                        sceneObject.material.dispose();
                    }
                }

                // Remove object from scene
                scene.remove(sceneObject); // OR sceneObject.removeFromParent()
            }
        }

        window.LoadNewModel = LoadNewModel;
        window.ClearScene = ClearScene;
        window.RestoreCamera = RestoreCamera;
        window.ToggleAxis = ToggleAxis;
    </script>

</body>
</html>